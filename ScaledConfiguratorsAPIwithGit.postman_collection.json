{
	"info": {
		"_postman_id": "1f3cb6aa-e346-4905-a747-7f410e8af561",
		"name": "ScaledConfiguratorsAPIwithGit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "469357"
	},
	"item": [
		{
			"name": "01. List of Autosamplers Based on Injectors selected",
			"item": [
				{
					"name": "01. SSLInjectorWithQty2",
					"item": [
						{
							"name": "addInstrumentCategory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"\r",
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectSSLInjectorwithQty2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"// Count for level 3 (5)\r",
											"pm.test(\"The response has expected list of level 3 autosamplers when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for AI/AS level 4 SKU identifiers (4)\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
											"});\r",
											"\r",
											"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
											"});\r",
											"\r",
											"\r",
											"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSL with Qty 2  Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
											"});\r",
											"\r",
											"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 2\r\n        }\r\n        \r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.get(\"variable_key\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "02. SSLWBKFInjectorWithQty2",
					"item": [
						{
							"name": "addInstrumentCategory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"\r",
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectSSLWBKFInjectorwithQty2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"// Count for level 3 (5)\r",
											"pm.test(\"The response has expected list of level 3 autosamplers when SSLWBKF with Qty 2 Selected \", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for AI/AS level 4 SKU identifiers (4)\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
											"});\r",
											"\r",
											"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
											"});\r",
											"\r",
											"\r",
											"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
											"});\r",
											"\r",
											"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 2\r\n        }\r\n        \r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.get(\"variable_key\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "03. PTVInjectorWithQty2",
					"item": [
						{
							"name": "addInstrumentCategory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"\r",
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectPTVInjectorwithQty2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"// Count for level 3 SKU's (2)\r",
											"pm.test(\"The response has all level 3 SKU's when PTV with Qty 2 selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
											"});\r",
											"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
											"pm.test(\"The response has all expected level 4's for Triplus RSH when PTV with Qty 2 selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for AI/AS (4)\r",
											"pm.test(\"The response all expected level4's for AI/AS when PTV with Qty 2 selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 2\r\n        }\r\n        \r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.get(\"variable_key\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "04. PTVWBKFWithQty2",
					"item": [
						{
							"name": "addInstrumentCategory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"\r",
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectPTVWBKFInjectorwithQty2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"// Count for level 3 SKU's (2)\r",
											"pm.test(\"The response has all level 3 SKU's when PTVWBKF with Qty 2 selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
											"});\r",
											"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
											"pm.test(\"The response has all expected level 4's for Triplus RSH when PTVWBKF with Qty 2 selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for AI/AS (4)\r",
											"pm.test(\"The response all expected level4's for AI/AS when PTVWBKF with Qty 2 selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 2\r\n        }\r\n        \r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.get(\"variable_key\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "02. ListOfRelatedProductsBasedonComponentsSelection",
			"item": [
				{
					"name": "01. RP_SkipMassSpec_withInjectors",
					"item": [
						{
							"name": "01. NoMassSpec_SSL_AI/ASAutosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-251000-0003",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL selection without MS\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"//Columns list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for Columns list\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(6);\r",
													"});\r",
													"//Columns list of Level 4 SKU's for polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Columns - polaar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Columns list of Level 4 SKU's for low polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- low polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for non polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- non polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[2].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for mid polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns - midpolar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[4].level4).to.have.lengthOf(15);\r",
													"});\r",
													"//Columns list of Level 4 SKU's for application specific\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- application specific\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[5].level4).to.have.lengthOf(23);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for PLOT\r",
													"pm.test(\"The response has Columns list of Level 4 SKU's for PLOT\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[3].level4).to.have.lengthOf(4);\r",
													"}); \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0003\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "02. NoMassSpec_SSLWBKF_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLWBKF selection without MS and Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "03. NoMassSpec_PTV_Autosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_FPD detector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray_PTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has Count for level 3\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response has Count for AI/AS (2)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Count for Triplus  RSH\r",
													"pm.test(\"The response has Count for Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-251000-0001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "04. NoMassSpec_PTVWBKF_SkipAutosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_FPD detector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray_PTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for Columns list\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Columns - polaar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Columns list of Level 4 SKU's for low polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- low polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for non polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- non polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for mid polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns - midpolar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(15);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for application specific\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- application specific\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[5].level4).to.have.lengthOf(23);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for PLOT\r",
													"pm.test(\"The response has Columns list of Level 4 SKU's for PLOT\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"}); \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "05. NoMassSpec_TSI_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_FPD detector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray_TSi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-251000-0001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for Columns list\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Columns - polaar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Columns list of Level 4 SKU's for low polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- low polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for non polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- non polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[2].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for mid polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns - midpolar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[4].level4).to.have.lengthOf(15);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for application specific\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- application specific\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[5].level4).to.have.lengthOf(23);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for PLOT\r",
													"pm.test(\"The response has Columns list of Level 4 SKU's for PLOT\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[3].level4).to.have.lengthOf(4);\r",
													"}); \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "06. NoMassSpec_COC_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_FPD detector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray_COC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_1R77010-2003",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-2003\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "07. NoMassSpec_SSLAndSSLWBKF_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLWBKF selection without MS and Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for Columns list\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Columns - polaar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Columns list of Level 4 SKU's for low polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- low polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for non polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- non polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for mid polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns - midpolar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(15);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for application specific\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- application specific\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[5].level4).to.have.lengthOf(23);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for PLOT\r",
													"pm.test(\"The response has Columns list of Level 4 SKU's for PLOT\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"}); \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "08. NoMassSpec_SSLAndPTV_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL and PTV selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(7);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "09. NoMassSpec_SSLAndPTVWBKF_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has Count for level 3\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has Count for Triplus RSH Smart Series and Triplus LS(5)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response has Count for AI/AS (2)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace\r",
													"pm.test(\"The response has Count for Triplus 500 headspace\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10)\r",
													"pm.test(\"The response has Count for Thermol desorption(10)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(8)\r",
													"pm.test(\"The response hasCount for PURGE AND TRAP\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_AI/ASAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS \r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLandPTVWBKF selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(7);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "10. NoMassSpec_SSLWBKFandPTVWBKF_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL and PTV selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(7);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "11. NoMassSpec_SSLWBKFAndPTV_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has Count for level 3\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has Count for Triplus RSH Smart Series and Triplus LS(5)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response has Count for AI/AS (2)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace\r",
													"pm.test(\"The response has Count for Triplus 500 headspace\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10)\r",
													"pm.test(\"The response has Count for Thermol desorption(10)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(8)\r",
													"pm.test(\"The response hasCount for PURGE AND TRAP\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_AI/ASAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS \r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLandPTVWBKF selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(7);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "12. NoMassSpec_PTVAndPTV_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (2)\r",
													"pm.test(\"The response has Count for level 3\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has Count for Triplus RSH Smart Series and Triplus LS(5)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response has Count for AI/AS (2)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_AI/ASAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "13. NoMassSpec_SSLAndCOC_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL and COC selection without MS and Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "14. NoMassSpec_SSLWBKFAndCOC_AutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (4)\r",
													"pm.test(\"The response has Count for level 3\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has Count for Triplus RSH Smart Series and Triplus LS(5)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace\r",
													"pm.test(\"The response has Count for Triplus 500 headspace\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10)\r",
													"pm.test(\"The response has Count for Thermol desorption(10)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(8)\r",
													"pm.test(\"The response hasCount for PURGE AND TRAP\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLWBKF and COC selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "15. NoMassSpec_PTVAndCOC_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_TriplusAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(9);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-2003\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "16. NoMassSpec_PTVWBKFAndCOC_SkipAutosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (2)\r",
													"pm.test(\"The response has Count for level 3\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(1);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has Count for Triplus RSH Smart Series and Triplus LS(5)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_SkipAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(9);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\":null,\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "02. RP_WithMassSpec_withInjectors",
					"item": [
						{
							"name": "01. MassSpec_SSL_AI/ASAutosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"all level3 SKU's displayed as expected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has expected list of Triplus RSH Autosampler when ssl selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response has expected level3 list for AI/AS Consumables when ssl selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace\r",
													"pm.test(\"The response has expected level3 list for Triplus HS when ssl selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10)\r",
													"pm.test(\"The response has expected level 3 list for Thermol desorption when ssl selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(11)\r",
													"pm.test(\"The response has expected level 3 list for purge and trap when ssl selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(7);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-251000-0003",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user selects MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL selection with MS\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for Columns list\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Columns - polaar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Columns list of Level 4 SKU's for low polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- low polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(9);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for non polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- non polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for mid polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns - midpolar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[3].level4).to.have.lengthOf(12);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for application specific\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- application specific\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[4].level4).to.have.lengthOf(21);\r",
													"});\r",
													"\r",
													"//AI/AS count\r",
													"pm.test(\"The response has correct count of level 3 SKU's for AI/AS  \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//AI/AS Syringes count\r",
													"pm.test(\"The response has correct count of level 4 SKU's for AI/AS Consuumables - Syringes \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//AI/AS Sample vials and closures count\r",
													"pm.test(\"The response has correct count of level 4 SKU's for AI/AS consumables -sample vials and closures\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0003\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "02. MassSpec_SSLWBKF_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n     \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"TSQ9610-NOVPI-AEI\",\r\n             \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-NOVPI-AEI\",\r\n             \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"all level3 SKU's displayed as expected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has expected list of Triplus RSH Autosampler when sslwBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response has expected level3 list for AI/AS Consumables when sslwBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace\r",
													"pm.test(\"The response has expected level3 list for Triplus HS when sslwBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10)\r",
													"pm.test(\"The response has expected level 3 list for Thermol desorption when sslwBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(11)\r",
													"pm.test(\"The response has expected level 3 list for purge and trap when sslwBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(7);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n           \"identifier\": \"TSQ9610-NOVPI-AEI\",\r\n             \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL selection with MS\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- consumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n          \"identifier\": \"TSQ9610-NOVPI-AEI\",\r\n             \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n        {    \r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "03. MassSpec_PTV_Autosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"TSQ9610-NV-AEI\",\r\n             \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_FPD detector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-NV-AEI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray_PTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has Count for level 3\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response has Count for AI/AS (2)\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Count for Triplus  RSH\r",
													"pm.test(\"The response has Count for Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-NV-AEI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-251000-0001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(10);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-NV-AEI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "04. MassSpec_PTVWBKF_SkipAutosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"TSQ9610-MTNOVPI\",\r\n             \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_FPD detector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-MTNOVPI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray_PTVWBKF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 SKU's (2)\r",
													"pm.test(\"The response has all level 3 SKU's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has all expected level 4's for Triplus RSH when PTVWBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response all expected level 4's for AI/AS when PTVWBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-MTNOVPI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-MTNOVPI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "05. MassSpec_TSI_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n     \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"TSQ9610-VPICI\",\r\n             \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_FPD detector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-VPICI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray_TSi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 identifiers (2)\r",
													"pm.test(\"The response has all expected level 3 SKU's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has all level 4 SKU's for Triplus RSH when TSI selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS (2)\r",
													"pm.test(\"The response has level 4 SKU's for the AI/AS when TSI selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-VPICI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-251000-0001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"TSQ9610-VPICI\",\r\n            \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "06. MassSpec_COC_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_FPD detector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n         \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray_COC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 identifiers (1)\r",
													"pm.test(\"The response has list of expected level 3 Autosamplers when COC selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(1);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(4)\r",
													"pm.test(\"The response has list of level 4 SKU's for Triplus RSH when COC selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n             \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_1R77010-2003",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(3);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[2].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"//Gas filters\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-2003\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n             \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "07. MassSpec_SSLAndSSLWBKF_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-STNOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-STNOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has expected list of level 3 autosamplers when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS level 4 SKU identifiers (4)\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n           \"identifier\": \"ISQ7610-STNOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLWBKF selection without MS and Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for Columns list\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Columns - polaar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Columns list of Level 4 SKU's for low polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- low polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(9);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for non polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- non polar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Columns list of Level 4 SKU's for mid polar\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns - midpolar\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(12);\r",
													"});\r",
													"\r",
													"\r",
													"//Columns list of Level 4 SKU's for application specific\r",
													"pm.test(\"The response has correct count of level 4 SKU's for columns- application specific\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(21);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-STNOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "08. MassSpec_SSLAndPTV_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n             \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has expected list of level 3 autosamplers when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS level 4 SKU identifiers (4)\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n           \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL and PTV selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(7);\r",
													"});\r",
													"\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "09. MassSpec_SSLAndPTVWBKF_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-VPICI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \" ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has expected list of level 3 autosamplers when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS level 4 SKU identifiers (4)\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \" ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_AI/ASAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS \r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLandPTVWBKF selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(7);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//AI/AS count\r",
													"pm.test(\"The response has correct count of level 3 SKU's for AI/AS  \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//AI/AS Syringes count\r",
													"pm.test(\"The response has correct count of level 4 SKU's for AI/AS Consuumables - Syringes \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//AI/AS Sample vials and closures count\r",
													"pm.test(\"The response has correct count of level 4 SKU's for AI/AS consumables -sample vials and closures\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0004\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \" ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "10. MassSpec_SSLWBKFandPTVWBKF_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-VPICI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has expected list of level 3 autosamplers when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS level 4 SKU identifiers (4)\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n        \"identifier\": \"ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL and PTV selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(7);\r",
													"});\r",
													"\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n         \"identifier\": \"ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "11. MassSpec_SSLWBKFAndPTV_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-VPICI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-VPICI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (5)\r",
													"pm.test(\"The response has expected list of level 3 autosamplers when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS level 4 SKU identifiers (4)\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
													"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSL and SSLWBKF Selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_AI/ASAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS \r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLandPTVWBKF selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(7);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//AI/AS count\r",
													"pm.test(\"The response has correct count of level 3 SKU's for AI/AS  \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//AI/AS Syringes count\r",
													"pm.test(\"The response has correct count of level 4 SKU's for AI/AS Consuumables - Syringes \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//AI/AS Sample vials and closures count\r",
													"pm.test(\"The response has correct count of level 4 SKU's for AI/AS consumables -sample vials and closures\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "12. MassSpec_PTVAndPTV_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-VPICI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-VPICI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 SKU's (2)\r",
													"pm.test(\"The response has all level 3 SKU's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(5)\r",
													"pm.test(\"The response has all expected level 4's for Triplus RSH when PTV and PTVWBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Count for AI/AS (4)\r",
													"pm.test(\"The response all expected level4's for AI/AS when PTV and PTVWBKF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n          \"identifier\": \"ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_AI/ASAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//AI/AS count\r",
													"pm.test(\"The response has correct count of level 3 SKU's for AI/AS  \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//AI/AS Syringes count\r",
													"pm.test(\"The response has correct count of level 4 SKU's for AI/AS Consuumables - Syringes \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//AI/AS Sample vials and closures count\r",
													"pm.test(\"The response has correct count of level 4 SKU's for AI/AS consumables -sample vials and closures\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0005\",\r\n               \"level3Identifier\": \"aIAS1610LiquidAutosampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n           \"identifier\": \"ISQ7610-VPICI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "13. MassSpec_SSLAndCOC_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n                \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (4)\r",
													"pm.test(\"The response has all level 3 Autosamplers when COC and SSL selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(4) level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for Triplus RSH when COC and SSL selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for Triplus 500 HS when COC and SSLWBF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for Thermal desorption when COC and SSL selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(11) level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for purge and trap when COC and SSL selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n                \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSL and COC selection without MS and Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(3);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"\r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[2].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n                \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "14. MassSpec_SSLWBKFAndCOC_SkipAutoSampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n           \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (4)\r",
													"pm.test(\"The response has all level 3 Autosamplers when COC and SSL selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(4) level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for Triplus RSH when COC and SSL selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for Triplus 500 HS when COC and SSLWBF selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"\r",
													"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for Thermal desorption when COC and SSL selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Count for level 4 SKU's for purge and trap(11) level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for purge and trap when COC and SSL selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(8);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_skipAutosamplers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// list of level 2's when user skips MS with SSL selected\r",
													"pm.test(\"Response has all expected level 2 SKU's for SSLWBKF and COC selection without MS and with Autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(3);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[2].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "15. NoMassSpec_PTVAndCOC_AutosamplerSelected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (1)\r",
													"pm.test(\"The response has all level 3 Autosamplers when COC and PTV selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(1);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(4) level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for Triplus RSH when COC and PTV selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n           \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_TriplusRSH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(3);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[2].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-2003\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n          \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "16. NoMassSpec_PTVWBKFAndCOC_SkipAutosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n         \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"// Count for level 3 (1)\r",
													"pm.test(\"The response has all level 3 Autosamplers when COC and PTV selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(1);\r",
													"});\r",
													"//Count for Triplus RSH Smart Series and Triplus LS(4) level 4 SKU identifiers\r",
													"pm.test(\"The response has all level 4 SKU for Triplus RSH when COC and PTV selected\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_SkipAutosampler",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all expected level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//List of level 3 Accessories\r",
													"pm.test(\"The response has correct count of level 3 SKU's for accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3).to.have.lengthOf(3);\r",
													"});\r",
													"//Accessories GC options level 4\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories - GC Options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Accessories Gas filters level4 \r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Gas filters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[1].level4).to.have.lengthOf(1);\r",
													"}); \r",
													"//Mass Spec accessories\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Accessories for Mass spec accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[2].level3[2].level4).to.have.lengthOf(9);\r",
													"}); \r",
													"\r",
													"//Consumables list \r",
													"pm.test(\"The response has correct count of level 3 SKU's for consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"\r",
													"//Consumables list level 4 - Consumable kits\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables- cosumables kits\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Ferrules for Injectors\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables - ferrules for Injectors\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - Linears and seals\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Linears and seals\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Consumables list level 4 - septa\r",
													"pm.test(\"The response has correct count of level 4 SKU's for Consumables -Septa\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\":null,\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n           \"identifier\": \"ISQ7610-AEI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "03. RP_withTriplusRSH",
					"item": [
						{
							"name": "01. NoMassSpec_Triplus RSH and 100LS",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n               \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_1R77010-0700B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all 12 level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Triplus Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Triplus Consumables level 4 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables sampler vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables Headspace vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//Triplus Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Accessoris level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Additional options\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Additional options\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Trayholders & vials\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Trayholders & vials\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Temperature controlled vial trays\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Temperature controlled vial trays\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(4);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Wash & solvent stations\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Wash & solvent stations\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[5].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Adapters\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Adapters\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 57 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 57 mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(16);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-0700B\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "02. NoMS_TriPlusRSHSMARTStandardliquid",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n               \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_1R77010-2001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Triplus Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for snart SPME arrow fibers\r",
													"pm.test(\"Response has all Triplus Consumables Smart SPME arrow fibers level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(13);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's  for Smart SPME fibers\r",
													"pm.test(\"Response has all Triplus Consumables Smart SPME fibers level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(15);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for sample vial and closures\r",
													"pm.test(\"Response has all Triplus Consumables sampler vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for Headspace and closures\r",
													"pm.test(\"Response has all Triplus Consumables Headspace vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Accessoris level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(13);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Adapters\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Adapters\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Trayholders & vials\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Trayholders & vials\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Heating and shaking modules\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Heating and shaking modules\", () => {const responseJson = pm.response.json();\r",
													" pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for headspace and syringes\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's headspace and syringes\", () => {const responseJson = pm.response.json();\r",
													" pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes250500uL85mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes250500uL85mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[5].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes2501000uL57mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes2501000uL57mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[6].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Additional options\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Additional options\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[7].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Temperature controlled vial trays\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Temperature controlled vial trays\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[8].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 57 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 57 mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[9].level4).to.have.lengthOf(16);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Injection sampling tools\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Injection sampling tools\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[10].level4).to.have.lengthOf(12);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 85 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 85 mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[11].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Wash & solvent stations\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Wash & solvent stations\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[12].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-2001\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "03. NoMS_TriPlusRSHSMARTStandardliquidAndHS",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n               \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n                     {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_1R77010-2002",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Triplus Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for snart SPME arrow fibers\r",
													"pm.test(\"Response has all Triplus Consumables Smart SPME arrow fibers level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(13);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's  for Smart SPME fibers\r",
													"pm.test(\"Response has all Triplus Consumables Smart SPME fibers level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(15);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for sample vial and closures\r",
													"pm.test(\"Response has all Triplus Consumables sampler vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for Headspace and closures\r",
													"pm.test(\"Response has all Triplus Consumables Headspace vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Accessoris level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(13);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Adapters\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Adapters\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Trayholders & vials\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Trayholders & vials\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Heating and shaking modules\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Heating and shaking modules\", () => {const responseJson = pm.response.json();\r",
													" pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for headspace and syringes\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's headspace and syringes\", () => {const responseJson = pm.response.json();\r",
													" pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes250500uL85mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes250500uL85mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[5].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes2501000uL57mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes2501000uL57mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[6].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Additional options\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Additional options\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[7].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Temperature controlled vial trays\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Temperature controlled vial trays\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[8].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 57 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 57 mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[9].level4).to.have.lengthOf(16);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Injection sampling tools\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Injection sampling tools\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[10].level4).to.have.lengthOf(11);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 85 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 85 mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[11].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Wash & solvent stations\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Wash & solvent stations\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[12].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-2002\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n     \r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "04. MS_TriPlusRSHSMARTStandardliquidAndRegular",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_1R77010-2003",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Triplus Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for smart SPME arrow fibers\r",
													"pm.test(\"Response has all Triplus Consumables Smart SPME arrow fibers level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(13);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's  for Smart SPME fibers\r",
													"pm.test(\"Response has all Triplus Consumables Smart SPME fibers level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(15);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for sample vial and closures\r",
													"pm.test(\"Response has all Triplus Consumables sampler vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for Headspace and closures\r",
													"pm.test(\"Response has all Triplus Consumables Headspace vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for uSPE cartridges & consumables\r",
													"pm.test(\"Response has all Triplus Consumables uSPE cartridges & consumables level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Accessoris level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(14);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for USPE kit\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for USPE kit\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Adapters\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Adapters\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes10mL57mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes10mL57mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(1);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Trayholders & vials\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Trayholders & vials\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Heating and shaking modules\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Heating and shaking modules\", () => {const responseJson = pm.response.json();\r",
													" pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for headspace and syringes\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's headspace and syringes\", () => {const responseJson = pm.response.json();\r",
													" pm.expect(responseJson.level2[1].level3[5].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes250500uL85mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes250500uL85mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[6].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes2501000uL57mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes2501000uL57mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[7].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Additional options\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Additional options\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[8].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Temperature controlled vial trays\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Temperature controlled vial trays\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[9].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 57 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 57 mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[10].level4).to.have.lengthOf(16);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Injection sampling tools\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Injection sampling tools\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[11].level4).to.have.lengthOf(12);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 85 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 85 mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[12].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Wash & solvent stations\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Wash & solvent stations\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[13].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-2003\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "05. MS_TriPlusRSHSMARTStandardliquidAndExtended",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_1R77010-2004",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Triplus Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for smart SPME arrow fibers\r",
													"pm.test(\"Response has all Triplus Consumables Smart SPME arrow fibers level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(13);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's  for Smart SPME fibers\r",
													"pm.test(\"Response has all Triplus Consumables Smart SPME fibers level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(15);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for sample vial and closures\r",
													"pm.test(\"Response has all Triplus Consumables sampler vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(8);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for Headspace and closures\r",
													"pm.test(\"Response has all Triplus Consumables Headspace vials and closures level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//Triplus Consumables level 4 SKU's for uSPE cartridges & consumables\r",
													"pm.test(\"Response has all Triplus Consumables uSPE cartridges & consumables level 4 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Accessoris level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3).to.have.lengthOf(14);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for USPE kit\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for USPE kit\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Adapters\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Adapters\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes10mL57mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes10mL57mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(1);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Trayholders & vials\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Trayholders & vials\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Heating and shaking modules\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Heating and shaking modules\", () => {const responseJson = pm.response.json();\r",
													" pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for headspace and syringes\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's headspace and syringes\", () => {const responseJson = pm.response.json();\r",
													" pm.expect(responseJson.level2[1].level3[5].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes250500uL85mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes250500uL85mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[6].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for liquidSyringes2501000uL57mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for liquidSyringes2501000uL57mm\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[7].level4).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Additional options\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Additional options\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[8].level4).to.have.lengthOf(8);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Temperature controlled vial trays\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Temperature controlled vial trays\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[9].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 57 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 57 mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[10].level4).to.have.lengthOf(16);\r",
													"});\r",
													"//Triplus Accessories level 4 SKU's for Injection sampling tools\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Injection sampling tools\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[11].level4).to.have.lengthOf(12);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for  Liquid syringes  0.5 - 100 uL, 85 mm\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's Liquid syringes  0.5 - 100 uL, 85 mm\", () => {const responseJson = pm.response.json(); \r",
													"pm.expect(responseJson.level2[1].level3[12].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"//Triplus Accessories level 4 SKU's for Wash & solvent stations\r",
													"pm.test(\"Response has all Triplus Accessoris level 4 SKU's for Wash & solvent stations\", () => {const responseJson = pm.response.json(); pm.expect(responseJson.level2[1].level3[13].level4).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"1R77010-2003\",\r\n               \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "04. RP_withTriplus500HeadSpace",
					"item": [
						{
							"name": "01. NoMS_TriPlus500HS120vialtray(MI-25118100)",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n               \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-25118000",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus 500 Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(1);\r",
													"});\r",
													"//Triplus 500 Consumables level 4 SKU's for Sample vials and closures\r",
													"pm.test(\"Response has all Triplus Consumables level 4 SKU's for Sample vials and closures \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Triplus 500 Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Accessoris level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Triplus 500 Accessories level 4 SKU's for accessories and options\r",
													"pm.test(\"Response has all Triplus Accessoris & options for level 4  \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//Triplus 500 Consumables level 4 SKU's for Vial crimpers\r",
													"pm.test(\"Response has all Triplus Consumables level 4 SKU's for Vial crimpers \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-25118000\",\r\n               \"level3Identifier\": \"triPlus500HeadspaceSampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "02. NoMassSpec_Triplus50012Vial",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n               \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-25118200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus 500 Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(1);\r",
													"});\r",
													"//Triplus 500 Consumables level 4 SKU's for Sample vials and closures\r",
													"pm.test(\"Response has all Triplus Consumables level 4 SKU's for Sample vials and closures \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Triplus 500 Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Accessoris level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Triplus 500 Accessories level 4 SKU's for accessories and options\r",
													"pm.test(\"Response has all Triplus Accessoris & options for level 4  \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Triplus 500 Accessories level 4 SKU's for Vial crampers and \r",
													"pm.test(\"Response has all Triplus Accessoris & options for level 4  \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-25118200\",\r\n               \"level3Identifier\": \"triPlus500HeadspaceSampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "03. MassSpec_TriPlus500HS240vial",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"TSQ9610-NV-AEI\",\r\n             \"level3Identifier\": \"tSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_MI-25118200",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"//Triplus 500 Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Consumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(1);\r",
													"});\r",
													"//Triplus 500 Consumables level 4 SKU's for Sample vials and closures\r",
													"pm.test(\"Response has all Triplus Consumables level 4 SKU's for Sample vials and closures \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"//Triplus 500 Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Triplus Accessoris level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Triplus 500 Accessories level 4 SKU's for accessories and options\r",
													"pm.test(\"Response has all Triplus Accessoris & options for level 4  \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Triplus 500 Consumables level 4 SKU's for Vial crimpers\r",
													"pm.test(\"Response has all Triplus Consumables level 4 SKU's for Vial crimpers \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[3].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-25118200\",\r\n               \"level3Identifier\": \"triPlus500HeadspaceSampler\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "05. RP_Purgeandtrapselected",
					"item": [
						{
							"name": "01. NoMassSpec_LuminPurge&Trap(110V)",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n               \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_76472-0301",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"//Purge and trap Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Purge and trap Accessories level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Purge and trap Accessories level 4 sku's for Additonal options\r",
													"pm.test(\"Response has all Purge and trap Accessories level 4 sku's for Additonal options \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Purge and trap Accessories level 4 sku's for water recirculating bath\r",
													"pm.test(\"Response has allPurge and trap Accessories level 4 sku's for water circulating bath \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Purge and trap Accessories level 4 sku's for sample heaters\r",
													"pm.test(\"Response has allPurge and trap Accessories level 4 sku's for sample heaters \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Purge and trap Accessories level 4 sku's for sample spargers\r",
													"pm.test(\"Response has allPurge and trap Accessories level 4 sku's for sample spargers \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(6);\r",
													"});\r",
													"\r",
													"\r",
													"//Purge and trap Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Purge and trap Cosumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(3);\r",
													"});\r",
													"//Purge and trap consumables level 4 sku's for liners\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for liners \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Purge and trap consumables level 4 sku's for liners and seals\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for liners and seals \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[1].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Purge and trap consumables level 4 sku's for application kits\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for application kits \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[2].level4).to.have.lengthOf(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"76472-0301\",\r\n               \"level3Identifier\": \"purgeAndTrap\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "02. NoMassSpec_LuminPurge&TrapAQUATekVA aters utosampler(110V)",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": null,\r\n    \r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n               \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_D-GC-002",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"//Purge and trap Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Purge and trap Accessories level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(3);\r",
													"});\r",
													"//Purge and trap Accessories level 4 sku's for Sample loops for AQUATek LVA\r",
													"pm.test(\"Response has all Purge and trap Accessories level 4 sku's for Sample loops for AQUATek LVA \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(4);\r",
													"});\r",
													"\r",
													"//Purge and trap Accessories level 4 sku's for water recirculating bath\r",
													"pm.test(\"Response has allPurge and trap Accessories level 4 sku's for water circulating bath \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Purge and trap consumables level 4 sku's for additional options\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for additional options\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Purge and trap Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Purge and trap Cosumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Purge and trap consumables level 4 sku's for liners\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for liners \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Purge and trap consumables level 4 sku's for sample vials and closures for purge and trap\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's  for sample vials and closures for purge and trap \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Purge and trap consumables level 4 sku's for liners and seals\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for liners and seals \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[2].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n          \"identifier\": \"D-GC-002\",\r\n               \"level3Identifier\": \"purgeAndTrap\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "03. MassSpec_ATOMX XYZwithchillertray110VAC",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_76472-4102",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"//Purge and trap Accessories level 3 SKU's \r",
													"pm.test(\"Response has all Purge and trap Accessories level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(2);\r",
													"});\r",
													"//Purge and trap Accessories level 4 sku's for Sample heaters\r",
													"pm.test(\"Response has all Purge and trap Accessories level 4 sku's for Sample heaters\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Purge and trap Accessories level 4 sku's for water recirculating bath\r",
													"pm.test(\"Response has allPurge and trap Accessories level 4 sku's for water circulating bath \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"\r",
													"//Purge and trap Consumables level 3 SKU's \r",
													"pm.test(\"Response has all Purge and trap Cosumables level 3 SKU's \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Purge and trap consumables level 4 sku's for liners\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for liners \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Purge and trap consumables level 4 sku's for sample vials and closures for purge and trap\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's  for sample vials and closures for purge and trap \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[1].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//Purge and trap consumables level 4 sku's for liners and seals\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for liners and seals \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[2].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"//Purge and trap consumables level 4 sku's for application kits\r",
													"pm.test(\"Response has all Purge and trap consumables level 4 sku's for application kits \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[4].level3[3].level4).to.have.lengthOf(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n          \"identifier\": \"76472-4102\",\r\n               \"level3Identifier\": \"purgeAndTrap\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "06. RP_ThermolDesorptionSelected",
					"item": [
						{
							"name": "01. MassSpec_Unity-xr,electronicControlwithUltra-xrautosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_76473-0801",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 3 SKU's \r",
													"pm.test(\"Response has all level 3 SKU's Accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Pneumatic accessories for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Pnematic accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 4 sku's for Tube based system options\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Tube based system options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level 3 SKU's  for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Thermal desorption consumables level 4 sku's for Focusing traps\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Focusing traps for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(11);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Starter kits for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Starter kits for Thermal desorption consumables \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(9);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n          \"identifier\": \"76473-0801\",\r\n               \"level3Identifier\": \"thermalDesorption\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "02. NoMassSpec_Unity-CIAAdvantageT-xr",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n      \r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_76473-0803",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 3 SKU's \r",
													"pm.test(\"Response has all level 3 SKU's Accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Pneumatic accessories for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Pnematic accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 4 sku's for Tube based system options\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Tube based system options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//level 4 SKU's level 4 sku's for CIA Advantage options for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for CIA Advantage options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level 3 SKU's  for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Thermal desorption consumables level 4 sku's for Focusing traps\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Focusing traps for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(11);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Starter kits for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Starter kits for Thermal desorption consumables \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(9);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n          \"identifier\": \"76473-0803\",\r\n               \"level3Identifier\": \"thermalDesorption\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "03. MassSpec_Unity-CIAAdvantageHL-xr",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n      \r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_76473-0804",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 3 SKU's \r",
													"pm.test(\"Response has all level 3 SKU's Accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Pneumatic accessories for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Pnematic accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 4 sku's for Tube based system options\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Tube based system options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(3);\r",
													"});\r",
													"\r",
													"//level 4 SKU's level 4 sku's for CIA Advantage options for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for CIA Advantage options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[4].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level 3 SKU's  for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Thermal desorption consumables level 4 sku's for Focusing traps\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Focusing traps for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(11);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Starter kits for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Starter kits for Thermal desorption consumables \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(9);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n          \"identifier\": \"76473-0804\",\r\n               \"level3Identifier\": \"thermalDesorption\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },{\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "04. MassSpec_Unity-xr,manualControlwithUltra-xrAutosampler",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n        \r\n        ] ,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n      \r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_D-GC-005",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 3 SKU's \r",
													"pm.test(\"Response has all level 3 SKU's Accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Pneumatic accessories for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Pnematic accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 4 sku's for Tube based system options\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Tube based system options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(4);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level 3 SKU's  for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Thermal desorption consumables level 4 sku's for Focusing traps\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Focusing traps for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(11);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Starter kits for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Starter kits for Thermal desorption consumables \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(9);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n          \"identifier\": \"D-GC-005\",\r\n               \"level3Identifier\": \"thermalDesorption\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },{\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n             \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "05. NoMassSpec_TD100-xrAdvantage,electronicControl",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"\r",
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpecarray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectorArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n     \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\":  null,\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjectorArray_TCDdetector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n      \r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setautosamplerArray",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRelatedProducts_76473-0809",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"pm.test(\"Response has all  level2 Sku's\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2).to.have.lengthOf(5);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 3 SKU's \r",
													"pm.test(\"Response has all level 3 SKU's Accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Pneumatic accessories for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Pnematic accessories for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[0].level4).to.have.lengthOf(2);\r",
													"});\r",
													"\r",
													"//Thermal desorption Accessories level 4 sku's for Tube based system options\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Tube based system options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[1].level4).to.have.lengthOf(3);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Humidity control options for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[2].level4).to.have.lengthOf(2);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Micro chamber for Thermal desorption accessories\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[1].level3[3].level4).to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has all level 3 SKU's  for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(4);\r",
													"});\r",
													"//Thermal desorption consumables level 4 sku's for Focusing traps\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Focusing traps for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(11);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Starter kits for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Starter kits for Thermal desorption consumables \", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(6);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Sorbent Tubes for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(9);\r",
													"});\r",
													"//level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption\r",
													"pm.test(\"Response has all level 4 SKU's level 4 sku's for Caps, ferrules & tools for Thermal desorption consumables\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(10);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n  \"newlySelectedComponents\": [\r\n        {\r\n          \"identifier\": \"76473-0809\",\r\n               \"level3Identifier\": \"thermalDesorption\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }, \r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.get(\"variable_key\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "03. Injectors_ErrorConstraintScenarios",
			"item": [
				{
					"name": "01. SSLInjectorandTSIselected_ERR_TRACE1600_TSI_001",
					"item": [
						{
							"name": "setModel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMassSpec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setInjector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectSSLInjectorandTSI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"pm.test(\"The response has error message TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].message).to.eql('iConnect Thermo Spray Injector (TSI) cannot be combined with a second injector. Please change your selection below before continuing.');\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error condition set to true for TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].errorCondition).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error messagelevel TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].messageLevel).to.eql('ERROR');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "02. SSLWBKFandTSIselected_ERR_TRACE1600_TSI_001",
					"item": [
						{
							"name": "setModel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMassSpec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setInjector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectSSLwithBKFwithTSI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"pm.test(\"The response has error message TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].message).to.eql('iConnect Thermo Spray Injector (TSI) cannot be combined with a second injector. Please change your selection below before continuing.');\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error condition set to true for TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].errorCondition).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error messagelevel TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].messageLevel).to.eql('ERROR');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "03. PTVWBKFandTSIselected_ERR_TRACE1600_TSI_001",
					"item": [
						{
							"name": "setModel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMassSpec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setInjector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectPTVwithBKFandTSI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"pm.test(\"The response has error message TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].message).to.eql('iConnect Thermo Spray Injector (TSI) cannot be combined with a second injector. Please change your selection below before continuing.');\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error condition set to true for TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].errorCondition).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error messagelevel TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].messageLevel).to.eql('ERROR');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "04. PTVandTSIselected_ERR_TRACE1600_TSI_001",
					"item": [
						{
							"name": "setModel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMassSpec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setInjector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectPTVandTSI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"pm.test(\"The response has error message TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].message).to.eql('iConnect Thermo Spray Injector (TSI) cannot be combined with a second injector. Please change your selection below before continuing.');\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error condition set to true for TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].errorCondition).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error messagelevel TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].messageLevel).to.eql('ERROR');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "05. COCandTSIselected_ERR_TRACE1600_TSI_001",
					"item": [
						{
							"name": "setModel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMassSpec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setInjector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectCOCandTSI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"pm.test(\"The response has error message TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].message).to.eql('iConnect Thermo Spray Injector (TSI) cannot be combined with a second injector. Please change your selection below before continuing.');\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error condition set to true for TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].errorCondition).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"The response has error messagelevel TSI cannot combined with any other second injector\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(pm.response.json().level2[0].level3[5].level4[0].messages[0].messageLevel).to.eql('ERROR');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070016\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "04. Autosamplers_ErrorConstraintScenarios",
			"item": [
				{
					"name": "01. AI/AS ad Triplus Compatbility error scenarios_ERR_TRACE1600_AIAS_TRSH_INCOMPATIBLE_001",
					"item": [
						{
							"name": "01. SSLand SSLWBKF_AI/ASandTriplusRSHselected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLInjectorandSSLWBKF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0001and1R77010-0700B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to false when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"1R77010-0700B\",\r\n            \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "02.SSLandPTVWBKF_ AI/ASandTriplusRSHselected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLandPTVWBKF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0003and1R77010-2001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to false when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0003\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"1R77010-2001\",\r\n            \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "03. SSLandPTV_AI/ASandTriplusselected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLandPTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0003and1R77010-2002",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to false when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0003\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"1R77010-2002\",\r\n            \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "04. SSLWBKFANDPTV_TriplusRSHandAI/ASselected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLwBKFandPTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0003and1R77010-2003",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to false when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0003\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"1R77010-2003\",\r\n            \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "05. PTVWBKFandSSLWBKF_1R77010-2004AndAI/AS",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLWBKFandPTVWBKF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0001and1R77010-2004",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to false when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0001\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"1R77010-2004\",\r\n            \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "06. PTVWBKFandPTV_1R77010-2001AndAI/AS",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectPTVWBKFandPTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0003and1R77010-2002",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('TriPlus RSH SMART Series autosamplers are not compatible with AI/AS 1610 Liquid Autosamplers.');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to false when AI/AS not compatible with Triplus RSH\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0003\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"1R77010-2002\",\r\n            \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "02. Triplus required with COC selection:ERR_TRACE1600_COC_TRSH_MANDATORY_001",
					"item": [
						{
							"name": "01. SSLWCOC_ PTandTriplusHSselected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLandCOCselected",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_76472-4100(PT))andMI-25118100(TriplusHS))",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"//Purge and trap Constraint message \r",
													"pm.test(\"The response has Error message on level 3 for Purge and trap when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[0].message).to.eql('TriPlus RSH SMART Series autosampler is required with the iConnect Cold On Column (COC) injector.');\r",
													"});\r",
													"pm.test(\"The response has Error messagelevel on level 3 for Purge and trap when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[0].messageLevel).to.eql('ERROR');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true on level 3 for Purge and trap  when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"\r",
													"//Triplus 500 HS\r",
													"pm.test(\"The response has Error message on level 3 for Triplus 500 HS when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[2].messages[0].message).to.eql('TriPlus RSH SMART Series autosampler is required with the iConnect Cold On Column (COC) injector.');\r",
													"});\r",
													"pm.test(\"The response has Error messagelevel on level 3 for Triplus 500 HS when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[2].messages[0].messageLevel).to.eql('ERROR');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true on level 3 for Triplus 500 HS when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[2].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-25118100\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"triPlus500HeadspaceSampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"76472-4100\",\r\n            \"level3Identifier\": \"purgeAndTrap\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "02. SSLWBKFandCOC_ThermalDesorptionandPurgeandtrapselected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLWBKFandCOCselected",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19071065\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_76472-4102(PT))and76473-0808(TD))",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"//Purge and trap Constraint message \r",
													"pm.test(\"The response has Error message on level 3 for Purge and trap when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[0].message).to.eql('TriPlus RSH SMART Series autosampler is required with the iConnect Cold On Column (COC) injector.');\r",
													"});\r",
													"pm.test(\"The response has Error messagelevel on level 3 for Purge and trap when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[0].messageLevel).to.eql('ERROR');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true on level 3 for Purge and trap  when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"\r",
													"//Thermal desorption\r",
													"pm.test(\"The response has Error message on level 3 for Thermal desorption when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('TriPlus RSH SMART Series autosampler is required with the iConnect Cold On Column (COC) injector.');\r",
													"});\r",
													"pm.test(\"The response has Error messagelevel on level 3 for Thermal desorption when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].messageLevel).to.eql('ERROR');\r",
													"});\r",
													"pm.test(\"The response has Error condition set to true on level 3 for Thermal desorption when Triplus RSH is skipped\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"76473-0808\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"thermalDesorption\"\r\n        },\r\n        {   \r\n            \"identifier\": \"76472-4102\",\r\n            \"level3Identifier\": \"purgeAndTrap\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "03. Dual Autosampler Constraint scenarios",
					"item": [
						{
							"name": "01. SSLandPTV_DualASwithPurgeandtrapselected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLandPTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0004and76472-4100(PT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has error condition set to true for Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler.');\r",
													"});\r",
													"\r",
													"pm.test(\"The response has error condition set to false when Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0004\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"76472-4100\",\r\n            \"level3Identifier\": \"purgeAndTrap\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "02. SSLandSSLWBKF_ Dual ASandThermalDesorption",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLandSSLWBKF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0005andMI-25118100(TriplusRSH HS))",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has error condition set to true for Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler.');\r",
													"});\r",
													"\r",
													"pm.test(\"The response has error condition set to false when Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0004\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"MI-25118200\",\r\n            \"level3Identifier\": \"triPlus500HeadspaceSampler\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "03.SSLandPTVBKF_ Dual ASandThermalDesorption",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLandPTVWBKF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070021\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0005and76473-0802(TD)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has error condition set to true for Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler.');\r",
													"});\r",
													"\r",
													"pm.test(\"The response has error condition set to false when Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0005\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"76473-0802\",\r\n            \"level3Identifier\": \"thermalDesorption\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "04.SSLWBKFanPTV DualASwithPurgeandtrapselected",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLWBKFandPTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0005and76472-4104(PT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has error condition set to true for Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler.');\r",
													"});\r",
													"\r",
													"pm.test(\"The response has error condition set to false when Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0005\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"76472-4104\",\r\n            \"level3Identifier\": \"purgeAndTrap\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "05.SSLWBKFanPTVWBKF_DualASwithTriplusHeadspace",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLWBKFandPTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0004andMI-25118100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has error condition set to true for Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler.');\r",
													"});\r",
													"\r",
													"pm.test(\"The response has error condition set to false when Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[0].messages[1].errorCondition).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0004\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"MI-25118100\",\r\n            \"level3Identifier\": \"triPlus500HeadspaceSampler\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "06. PTVWBKFanPTV_DualASwithTriplusRSH",
							"item": [
								{
									"name": "setModel",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const var_name = pm.variables.get(\"environment_url\");\r",
													"console.log(var_name)\r",
													"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
													"console.log(url)\r",
													"\r",
													"\r",
													"if (!url) console.log('Missing url endpoint')\r",
													"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
													"\r",
													"const configureRequest = {\r",
													"    url: url,\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'       \r",
													"    },\r",
													"    body: {\r",
													"     mode: 'raw',\r",
													"   \r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(configureRequest, function (err, res) {\r",
													"  const body = res.json();\r",
													"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmodelArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setMassSpec",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setmassSpectrometerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setDetectors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setdetectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setInjector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setinjectorArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "selectSSLWBKFandPTV",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        },\r\n        {\r\n            \"identifier\": \"19070020\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"components"
											],
											"query": [
												{
													"key": "identifier",
													"value": "_setautosamplerArray"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "setRP_MI-251000-0005and1R77010-2002TTriplusRSH)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"  pm.expect(pm.response.code).to.eql(200);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has Error message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[0].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler. Please change your selection below before continuing.');\r",
													"});\r",
													"pm.test(\"The response has error condition set to true for Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[0].errorCondition).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"The response has informational message Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[1].message).to.eql('Gemini AI/AS 1610 autosampler cannot be selected with a second autosampler.');\r",
													"});\r",
													"\r",
													"pm.test(\"The response has error condition set to false when Dual AI/AS cannot combine with second autosampler\", () => {\r",
													"    //parse the response JSON and test the properties\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(pm.response.json().level2[0].level3[1].messages[1].errorCondition).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "languageCode",
												"value": "en",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setautosamplerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"MI-251000-0005\",\r\n            \"quantity\": 1,\r\n            \"level3Identifier\": \"aIAS1610LiquidAutosampler\"\r\n        },\r\n        {   \r\n            \"identifier\": \"1R77010-2002\",\r\n            \"level3Identifier\": \"triPlusRSHSMARTSeriesTriPlus100LS\",\r\n             \"quantity\": 1\r\n        }\r\n     \r\n    ],\r\n    \r\n     \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{environment_url}}/api/store/instrument/configure/v2/relatedProducts",
											"host": [
												"{{environment_url}}"
											],
											"path": [
												"api",
												"store",
												"instrument",
												"configure",
												"v2",
												"relatedProducts"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}
{
	"info": {
		"_postman_id": "fa656e91-1be9-4b4f-946e-0620a059b98f",
		"name": "ScaledConfiguratorsAPIAutomationwithJenkinsIntegration Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "469357"
	},
	"item": [
		{
			"name": "01. List of Autosamplers Based on Injectors selected Copy",
			"item": [
				{
					"name": "01. SSLInjectorWithQty2",
					"item": [
						{
							"name": "addInstrumentCategory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"\r",
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectSSLInjectorwithQty2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"// Count for level 3 (5)\r",
											"pm.test(\"The response has expected list of level 3 autosamplers when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for AI/AS level 4 SKU identifiers (4)\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
											"});\r",
											"\r",
											"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
											"});\r",
											"\r",
											"\r",
											"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSL with Qty 2  Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
											"});\r",
											"\r",
											"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSL with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070010\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 2\r\n        }\r\n        \r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.get(\"variable_key\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "02. SSLWBKFInjectorWithQty2",
					"item": [
						{
							"name": "addInstrumentCategory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//const url = 'https://www.qa.thermofisher.com/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"\r",
											"const var_name = pm.variables.get(\"environment_url\");\r",
											"console.log(var_name)\r",
											"const url = var_name+'/api/store/instrument/configure/v1/metadata?instrumentCategory=trace1600'\r",
											"console.log(url)\r",
											"\r",
											"if (!url) console.log('Missing url endpoint')\r",
											"if (pm.environment.get('token')) pm.environment.set('token', '')\r",
											"\r",
											"const configureRequest = {\r",
											"    url: url,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'       \r",
											"    },\r",
											"    body: {\r",
											"     mode: 'raw',\r",
											"   \r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(configureRequest, function (err, res) {\r",
											"  const body = res.json();\r",
											"  pm.globals.set(\"cpqInstanceId\", body.cpqInstanceId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": null,\r\n    \"newlySelectedComponents\": null,\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmodelArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmodelArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmodelArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n            \r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": null,\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setmassSpectrometerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setmassSpectrometerArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setmassSpectrometerArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setdetectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setdetectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "setDetector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setdetectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setinjectorArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setinjectorArray"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "selectSSLWBKFInjectorwithQty2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"// Count for level 3 (5)\r",
											"pm.test(\"The response has expected list of level 3 autosamplers when SSLWBKF with Qty 2 Selected \", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for Triplus RSH Smart Series and Triplus LS(5) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus RSH when SLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[0].level4).to.have.lengthOf(5);\r",
											"});\r",
											"//Count for AI/AS level 4 SKU identifiers (4)\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for AI/AS when SSLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[1].level4).to.have.lengthOf(4);\r",
											"});\r",
											"\r",
											"//Count for Triplus 500 headspace level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for TRiplus 500 Headspace when SSLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[4].level4).to.have.lengthOf(3);\r",
											"});\r",
											"\r",
											"\r",
											"//Count for Thermol desorption(10) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for Thermal desorption when SSLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[2].level4).to.have.lengthOf(10);\r",
											"});\r",
											"\r",
											"//Count for level 4 SKU's for purge and trap(8) level 4 SKU identifiers\r",
											"pm.test(\"The response has expected list of level 4 autosamplers for Purge and trap when SSLWBKF with Qty 2 Selected\", () => {\r",
											"    //parse the response JSON and test the properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.level2[0].level3[3].level4).to.have.lengthOf(8);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "languageCode",
										"value": "en",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cpqInstanceId\": \"{{cpqInstanceId}}\",\r\n    \"instrumentCategory\": \"trace1600\",\r\n    \"previouslySelectedLevel2Identifier\": \"_setinjectorArray\",\r\n    \"newlySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"19070011\",\r\n            \"level3Identifier\": \"_setinjectorArray\",\r\n            \"quantity\": 2\r\n        }\r\n        \r\n\r\n    ],\r\n    \"previouslySelectedComponents\": [\r\n        {\r\n            \"identifier\": \"D-TRACE1610-GC\",\r\n            \"level3Identifier\": \"_setmodelArray\",\r\n            \"quantity\": 1\r\n        },\r\n      {\r\n            \"identifier\": \"ISQ7610-NOVPI\",\r\n            \"level3Identifier\": \"iSQMS\",\r\n            \"quantity\": 1\r\n        },\r\n               {\r\n            \"identifier\": \"19070040\",\r\n            \"level3Identifier\": \"_setdetectorArray\",\r\n            \"quantity\": 1\r\n        }\r\n    ],\r\n    \"previouslySelectedRelatedProducts\": null,\r\n    \"previouslySelectedSoftwareServices\": null,\r\n    \"componentChanged\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{environment_url}}/api/store/instrument/configure/v2/components?identifier=_setautosamplerArray",
									"host": [
										"{{environment_url}}"
									],
									"path": [
										"api",
										"store",
										"instrument",
										"configure",
										"v2",
										"components"
									],
									"query": [
										{
											"key": "identifier",
											"value": "_setautosamplerArray"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.get(\"variable_key\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	]
}